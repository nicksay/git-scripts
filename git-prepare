#!/bin/bash
#
# Prepare the current branch for a pull request: pull and rebase from upstream,
# automatically avoiding interactive mode unless needed.
#
# $1 = upstream (defaults to upstream from `git get-fork-and-upstream`)
# $2 = branch (defaults to "master")

set -e  # stop on error

SCRIPTS="$(dirname "$0")"

upstream=${1:-$("$SCRIPTS"/git-get-fork-and-upstream | awk '/upstream:/ { print $2 }')}
current=$(git symbolic-ref --short HEAD)
branch=${2:-master}


echo
echo "Fetching latest commits for $upstream..."
echo "> git fetch $upstream"
git fetch $upstream
echo "Done."

all_changes=$(git log --oneline $upstream/$branch...$current)
merge_base=$(git merge-base $upstream/$branch $current)
local_changes=$(git log --oneline $merge_base...$current)
# When counting lines, skip blanks.
all_num=$(echo "$all_changes" | sed '/^\s*$/d' | wc -l)
local_num=$(echo "$local_changes" | sed '/^\s*$/d' | wc -l)
non_fixup_num=$(echo "$local_changes" | egrep -v ' fixup! ' | sed '/^\s*$/d' | wc -l)

echo
if (( $all_num > 0 )); then
  echo "Rebasing on $upstream/$branch..."
  if (( $local_num > 0 )); then
    if (( $non_fixup_num == 1 )); then
      # Accept commits as-is if there's only one non-fixup.
      rebase_editor="cat"
    else
      # Otherwise, launch editor for review.
      rebase_editor=""
    fi
    echo "> git rebase -i --autosquash $upstream/$branch"
    rebase_log=$(GIT_SEQUENCE_EDITOR="$rebase_editor" git rebase -i --autosquash $upstream/$branch)
  else
    echo "> git rebase $upstream/$branch"
    rebase_log=$(git rebase $upstream/$branch)
  fi
  echo "$rebase_log" | egrep '^# Rebase ' || true
  echo "Done."
else
  echo "Nothing to do."
fi

echo
echo "Commits on $current since $upstream/$branch:"
git log --oneline $upstream/$branch...$current
